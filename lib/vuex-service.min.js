!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("vuex-service",[],e):"object"==typeof exports?exports["vuex-service"]=e():t["vuex-service"]=e()}("undefined"!=typeof self?self:this,function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=6)}([function(t,e){t.exports=require("lodash")},function(t,e,n){"use strict";(function(t){var r=n(0),o=n.n(r);function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function a(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var c={},u={},s={};function f(t,e){return function n(){if(!n.hookCalled)return n.hookCalled=!0,t.apply(e,arguments)}}var l,p=new(function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n,r;return e=t,(n=[{key:"getHook",value:function(t,e,n){var r=s[t];return r&&r[e]||n}},{key:"hook",value:function(t,e,n,r){var o=s[t]=s[t]||{},a=c[t]=c[t]||{},l=u[t]=u[t]||{};if(2===arguments.length&&"object"===i(e)){var p={};for(var y in e)p[y]=this.hook(t,y,e[y]);return p}return a[e]=a[e]||[],l[e]=l[e]||[],o[e]?o[e]:(o[e]=function(){var t,i=this,c=arguments[arguments.length-1],u=a[e],s=l[e],p=u.length,y=-1,h=o[e].numAsyncPres,v=function(){var e,r,o,a,u=Array.prototype.slice.call(arguments);if(y===p)return a=function(){if(arguments[0]instanceof Error)return g(arguments[0]);var e,n,u=Array.prototype.slice.call(arguments,1);if(u.length&&(t=u),++o<r){if((e=s[o]).length<1)throw new Error("Your post must have a next argument -- e.g., function (next, ...)");return n=[f(a)].concat(t),e.apply(i,n)}return"function"==typeof c?c.apply(i,arguments):void 0},"function"==typeof c&&(u[u.length-1]=f(a)),r=s.length,o=-1,e=n.apply(i,u),r&&"function"!=typeof c?a():e};if(h);function g(t){if("function"==typeof c)return c(t);if(r)return r.call(i,t);throw t}return function n(){if(arguments[0]instanceof Error)return g(arguments[0]);var r,a,s=Array.prototype.slice.call(arguments);if(!s.length||null==arguments[0]&&"function"==typeof c||(t=s),++y<p){if((r=u[y]).isAsync&&r.length<2)throw new Error("Your pre must have next and done arguments -- e.g., function (next, done, ...)");if(r.length<1)throw new Error("Your pre must have a next argument -- e.g., function (next, ...)");return a=(r.isAsync?[f(n),f(_asyncsDone)]:[f(n)]).concat(t),r.apply(i,a)}return o[e].numAsyncPres?void 0:v.apply(i,t)}.apply(this,arguments)},o[e].numAsyncPres=0,o[e])}},{key:"pre",value:function(t,e,n,r,o){"boolean"!=typeof arguments[2]&&(o=r,r=n,n=!1);var i=s[t]=s[t]||{},a=c[t]=c[t]||{};return this._lazySetupHooks(t,i,e,o),(r.isAsync=n)&&i[e].numAsyncPres++,(a[e]=a[e]||[]).push(r),this}},{key:"post",value:function(t,e,n,r){3===arguments.length&&(r=n,n=!1);var o=s[t]=s[t]||{},i=u[t]=u[t]||{};return this._lazySetupHooks(t,o,e),(i[e]=i[e]||[]).push(r),this}},{key:"removePre",value:function(t,e,n){var r=c[t]=c[t]||{};return r[e]?(2===arguments.length?r[e].length=0:r[e]=r[e].filter(function(t){return t!==n}),this):this}},{key:"_lazySetupHooks",value:function(t,e,n,r){if(!e[n])throw new Error("The hook is not set. ".concat(t,".").concat(n));void 0===e[n].numAsyncPres&&this.hook(n,e[n],r)}}])&&a(e.prototype,n),r&&a(e,r),t}());o.a.bindAll(p,(l=p,o.a.without(Object.getOwnPropertyNames(Object.getPrototypeOf(l)),"constructor"))),e.a=p,t.exports=exports.default}).call(this,n(2)(t))},function(t,e){t.exports=function(t){if(!t.webpackPolyfill){var e=Object.create(t);e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),Object.defineProperty(e,"exports",{enumerable:!0}),e.webpackPolyfill=1}return e}},function(t,e,n){"use strict";(function(t){var r=n(0),o=n.n(r),i=n(5),a=n(1);function c(t,e,n){var r=e.$store?e.$store.getters:e.getters,i=Object.keys(r),a=n?new RegExp("^"+n+"/"):new RegExp("");o()(i).filter(function(t){return a.test(t)}).map(function(e){var n=e.replace(/[-_\w\d]+\//,"");!function(t,e,n,r){try{Object.defineProperty(t,e,{get:function(){return o.a.get(n,r)}})}catch(t){}}(t,n,r,e)}).value()}function u(t,e,n){if(o.a.isString(n)){if(!o.a.get(t,n))throw new Error("The function does not exist. "+e+"."+n)}else o.a.forEach(n,function(n,r){if(!o.a.get(t,r))throw new Error("The function does not exist. "+e+"."+r)})}function s(t,e,n,r){var i=t.$store?t.$store.state:t.state,a=e?Object.keys(o.a.get(i,e)):Object.keys(i);o()(a).map(function(i){if(o.a.get(r,i)){var a="".concat(e,".").concat(i).replace(/^\./,"");s(t,a,i,r)}else{var c="".concat(e,".").concat(i).replace(/^\./,"");!function(t,e,n,r,i){var a=e?o.a.get(t,e):t;try{Object.defineProperty(a,n,{get:function(){var t=r.$store?r.$store.state:r.state;return o.a.get(t,i)},set:function(t){var e=r.$store?r.$store.state:r.state;o.a.set(e,i,t)}})}catch(t){}}(r,n,i,t,c)}}).value()}var f={};e.a=function(t){var e=t.hook;return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",n=arguments.length>1?arguments[1]:void 0,r=this;o.a.isString(t)||(n=t,t=""),n&&(r=n);var l,p=t.trim().replace(" ","").split(","),y={};return p.forEach(function(t){var n=/.+\/([-_\w\d]+)$/;if(l=(n.test(t)?n.exec(t)[1]:t)||"Root",f[l])y[l]=f[l];else{var p={};c(p,r,t),function(t,e,n,r,i){var c=e.$store?e.$store._actions:e._actions,s=Object.keys(c),f=n?new RegExp("^"+n+"/"):new RegExp("");o()(s).filter(function(t){return f.test(t)}).map(function(n){var c=n.replace(f,"").split("/").join(".");if(o.a.get(t,c))throw new Error("duplicate key");var s=e.$store?e.$store:e,l=function(t,e){var r,o=Array.prototype.slice.call(arguments);return r=1===o.length?t:o,s.dispatch(n,r)};i?(o.a.set(t,c,a.a.getHook(r,c,l)),o.a.set(t,"hook",function(e){u(t,r,e);var n=o.a.partial(a.a.hook,r).apply(this,[].slice.call(arguments));o.a.isObject(n)?o.a.forEach(n,function(e,n){return o.a.set(t,n,e)}):o.a.set(t,e,n)}),o.a.set(t,"pre",function(){return o.a.partial(a.a.pre,r).apply(this,[].slice.call(arguments)),t}),o.a.set(t,"post",function(){return o.a.partial(a.a.post,r).apply(this,[].slice.call(arguments)),t})):o.a.set(t,c,l)}).value()}(p,r,t,l,e),function(t,e,n,r,i){var c=e.$store?e.$store._mutations:e._mutations,s=Object.keys(c),f=n?new RegExp("^"+n+"/"):new RegExp("");o()(s).filter(function(t){return f.test(t)}).map(function(n){var c=n.replace(f,"").split("/");c.splice(c.length-1,0,"m");var s=c.join("."),l=e.$store?e.$store:e,p=function(t,e){var r={},o=Array.prototype.slice.call(arguments);return r=1===o.length?t:o,l.commit(n,r)};i?(o.a.set(t,s,a.a.getHook(r,s,p)),o.a.set(t,"hook",function(e){u(t,r,e);var n=o.a.partial(a.a.hook,r).apply(this,[].slice.call(arguments));o.a.isObject(n)?o.a.forEach(n,function(e,n){return o.a.set(t,n,e)}):o.a.set(t,e,n)}),o.a.set(t,"pre",function(){return o.a.partial(a.a.pre,r).apply(this,[].slice.call(arguments)),t}),o.a.set(t,"post",function(){return o.a.partial(a.a.post,r).apply(this,[].slice.call(arguments)),t})):o.a.set(t,s,p)}).value()}(p,r,t,l,e),function(t,e,n){s(e,n.split("/").join("."),"",t)}(p,r,t),o.a.merge(p,i.a.getInstance(t)),y[l]=p,f[l]=p}}),p.length>1?y:y[l]}},t.exports=exports.default}).call(this,n(2)(t))},function(t,e){t.exports=require("vuex")},function(t,e,n){"use strict";(function(t){function n(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var r="$$tinyEventListeners",o=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.events={}}var e,o,i;return e=t,(o=[{key:"$on",value:function(t,e,n){this[r]||(this[r]={});var o=this[r];if(o[e]||(o[e]=[]),o[e].push(n),t&&t.$on){var i=this;t.$on("hook:beforeDestroy",function(){i.$off(e,n)})}return this}},{key:"$once",value:function(t,e,n,r){var o=this,i=function t(){r.apply(this,arguments),o.$off(e,t),o.$off(n,t)};return this.$on(t,e,i),this.$on(t,n,i),this}},{key:"$off",value:function(t,e){if(!this[r]||!this[r][t])return this;var n=this[r];if(e){var o=n[t],i=o.indexOf(e);i>-1&&o.splice(i,1)}else delete n[t];return this}},{key:"getListeners",value:function(t){var e=this;return Object.keys(e[r]).filter(function(e){return new RegExp(e.replace(/\./g,"\\.").replace(/\*/g,".*")+"$").test(t)}).reduce(function(t,n){return t.concat(e[r][n])},[])}},{key:"$emit",value:function(t){if(this[r]){for(var e=this.getListeners.call(this,t),n=[].slice.call(arguments,1),o=0;o<e.length;o++)e[o].apply(null,n);return this}}},{key:"getInstance",value:function(t){var e=this;if(this.events[t])return this.events[t];var n={$emit:function(n,r){e.$emit("".concat(t,".").concat(n),r)},$broadcast:function(t,n){e.$emit("__All__.".concat(t),n)},$on:function(n,r,o){"string"==typeof n&&(o=r,r=n,n=null),e.$on(n,"".concat(t,".").concat(r),o),e.$on(n,"__All__.".concat(r),o)},$once:function(n,r,o){"string"==typeof n&&(o=r,r=n,n=null),e.$once(n,"".concat(t,".").concat(r),"__All__.".concat(r),o)},$off:function(n,r){e.$off("".concat(t,".").concat(n),r),e.$off("__All__.".concat(n),r)}};return this.events[t]=n,n}}])&&n(e.prototype,o),i&&n(e,i),t}();e.a=new o,t.exports=exports.default}).call(this,n(2)(t))},function(t,e,n){t.exports=n(7)},function(t,e,n){"use strict";n.r(e);var r=n(4),o=n.n(r),i=n(0),a=n.n(i);function c(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,c=t[Symbol.iterator]();!(r=(a=c.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return n}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var u={set:function(t,e){var n=c(e,2),r=n[0],o=n[1];a.a.set(t,r,o)},add:function(t,e){var n=c(e,2),r=n[0],o=n[1];a.a.get(t,r).push(o)},update:function(t,e){var n=c(e,2),r=n[0],o=n[1];a.a.isString(r)?a.a.set(t,r,o):a.a.merge(r,o)},remove:function(t,e){var n=c(e,2),r=n[0],o=n[1];a.a.get(t,r).splice(a.a.get(t,r).indexOf(o),1)}};var s,f=n(3);function l(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.store,r="$$store";s=n?Object(i.partialRight)(Object(f.a)(e),n):Object(f.a)(e),t.prototype.hasOwnProperty(r)||(Object.defineProperty(t.prototype,r,{get:function(){return s}}),o.a.Store.prototype[r]=s)}n.d(e,"Store",function(){return s}),n.d(e,"defaultMutations",function(){return u}),l.version="__VERSION__";e.default=l}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,